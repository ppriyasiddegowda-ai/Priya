# Step 1: Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load CSV file
df = pd.read_csv("sales_data.csv")

# Step 3: Basic info
print(df.head())       # First 5 rows
print(df.info())       # Data types
print(df.describe())   # Summary statistics

# Step 4: Data Cleaning
df['Date'] = pd.to_datetime(df['Date'])  # Convert Date column
df = df.dropna()  # Remove missing values

# Step 5: Analysis Examples
total_sales = df['TotalSales'].sum()
print("Total Sales:", total_sales)

sales_by_product = df.groupby('Product')['TotalSales'].sum().sort_values(ascending=False)
print(sales_by_product)

sales_by_region = df.groupby('Region')['TotalSales'].sum()

# Step 6: Charts
plt.figure(figsize=(8,5))
sns.barplot(x=sales_by_product.index, y=sales_by_product.values, palette="Blues_d")
plt.title("Total Sales by Product")
plt.ylabel("Sales Amount")
plt.show()

plt.figure(figsize=(8,5))
sns.lineplot(data=df, x='Date', y='TotalSales', hue='Region', marker='o')
plt.title("Sales Trend Over Time by Region")
plt.show()

plt.figure(figsize=(6,6))
sales_by_region.plot(kind='pie', autopct='%1.1f%%', startangle=90)
plt.title("Sales Share by Region")
plt.ylabel("")
plt.show()









1. What is Pandas used for?
Pandas is a Python library for data analysis and manipulation. It’s great for working with structured data like tables (CSV, Excel, SQL).




2. What’s a DataFrame?
A DataFrame is a 2D table-like data structure in Pandas with rows and columns, similar to an Excel sheet.




3. How do you read a CSV file?

import pandas as pd
df = pd.read_csv("file.csv")

This loads the CSV into a DataFrame.




4. What is groupby()?
groupby() groups data by one or more columns so you can apply calculations (like sum, mean) to each group.
Example:

df.groupby("Region")["Sales"].sum()




5. How do you filter rows?
Using a condition:

df[df["Sales"] > 1000]

This returns only rows where Sales is greater than 1000.




6. Difference between loc[] and iloc[]?

loc[] → Access rows/columns by labels (names).

iloc[] → Access rows/columns by index positions (numbers).
Example:


df.loc[0, "Sales"]   # First row, Sales column (by label)
df.iloc[0, 2]        # First row, third column (by position)




7. What does .head() do?
Returns the first 5 rows of a DataFrame by default.

df.head(10)  # First 10 rows




8. How can you create a bar chart?
Using Pandas plotting or Matplotlib:

df["Sales"].plot(kind="bar")

or

import matplotlib.pyplot as plt
plt.bar(df["Product"], df["Sales"])
plt.show()



9. What’s the shape of a DataFrame?
df.shape returns a tuple (rows, columns).
Example: (100, 6) means 100 rows and 6 columns.




10. What is NaN?
NaN stands for Not a Number — it represents missing or undefined data in Pandas.




